[gd_scene load_steps=15 format=2]

[ext_resource path="res://Assets/SF1/Genesis 32X SCD - Shining Force - Overworld Sprites - Removed Background.png" type="Texture" id=1]
[ext_resource path="res://General/BattleBase/BattleBase.tscn" type="PackedScene" id=2]

[sub_resource type="Shader" id=11]
code = "shader_type canvas_item;

render_mode blend_mul;

void fragment() {
    vec3 screen_pixel = texture(SCREEN_TEXTURE, SCREEN_UV).rgb;
    screen_pixel.r = 1.0;
    COLOR = vec4(screen_pixel, 1.0);
}"

[sub_resource type="ShaderMaterial" id=12]
shader = SubResource( 11 )

[sub_resource type="Shader" id=13]
code = "/**
* hq2x and hq4x filter.
* https://www.shadertoy.com/view/MslGRS
* https://github.com/libretro/common-shaders/blob/master/scalehq/shaders/4xScaleHQ.cg
* https://github.com/libretro/common-shaders/blob/master/scalehq/shaders/2xScaleHQ.cg
*/
shader_type canvas_item;

uniform int type = 0; // 0:none, 1:hq2x, 2:hq4x

void fragment(){
	vec4 color = texture(SCREEN_TEXTURE, SCREEN_UV);
	vec2 uv = SCREEN_UV;
	vec4 c = color;


	float x = 0.5 * SCREEN_PIXEL_SIZE.x;
	float y = 0.5 * SCREEN_PIXEL_SIZE.y;

	

	vec2 dg1 = vec2( x, y);
	vec2 dg2 = vec2(-x, y);

	

	vec2 ddx = vec2(x,0.0);
	vec2 ddy = vec2(0.0,y);
	const vec4 dt = vec4(1.0);
	if (type==2){
		
		float mx = 1.0; // start smoothing wt.
		const float k = -1.10; // wt. decrease factor
		const float max_w = 0.75; // max filter weigth
		const float min_w = 0.03; // min filter weigth
		const float lum_add = 0.33; // effects smoothing
		
		vec2 sd1 = dg1*0.5;
		vec2 sd2 = dg2*0.5;
		
		vec4 t1 = vec4(uv-sd1,uv-ddy);
		vec4 t2 = vec4(uv-sd2,uv+ddx);
		vec4 t3 = vec4(uv+sd1,uv+ddy);
		vec4 t4 = vec4(uv+sd2,uv-ddx);
		vec4 t5 = vec4(uv-dg1,uv-dg2);
		vec4 t6 = vec4(uv+dg1,uv+dg2);
		
		vec4 i1 = texture(SCREEN_TEXTURE, t1.xy);
		vec4 i2 = texture(SCREEN_TEXTURE, t2.xy);
		vec4 i3 = texture(SCREEN_TEXTURE, t3.xy);
		vec4 i4 = texture(SCREEN_TEXTURE, t4.xy);

		vec4 o1 = texture(SCREEN_TEXTURE, t5.xy);
		vec4 o3 = texture(SCREEN_TEXTURE, t6.xy);
		vec4 o2 = texture(SCREEN_TEXTURE, t5.zw);
		vec4 o4 = texture(SCREEN_TEXTURE, t6.zw);

		vec4 s1 = texture(SCREEN_TEXTURE, t1.zw);
		vec4 s2 = texture(SCREEN_TEXTURE, t2.zw);
		vec4 s3 = texture(SCREEN_TEXTURE, t3.zw);
		vec4 s4 = texture(SCREEN_TEXTURE, t4.zw);
		
		float ko1 = dot(abs(o1-c),dt);
		float ko2 = dot(abs(o2-c),dt);
		float ko3 = dot(abs(o3-c),dt);
		float ko4 = dot(abs(o4-c),dt);

		float k1=min(dot(abs(i1-i3),dt),max(ko1,ko3));
		float k2=min(dot(abs(i2-i4),dt),max(ko2,ko4));

		float w1 = k2; if(ko3<ko1) w1*=ko3/ko1;
		float w2 = k1; if(ko4<ko2) w2*=ko4/ko2;
		float w3 = k2; if(ko1<ko3) w3*=ko1/ko3;
		float w4 = k1; if(ko2<ko4) w4*=ko2/ko4;

		c=(w1*o1+w2*o2+w3*o3+w4*o4+0.001*c)/(w1+w2+w3+w4+0.001);
		w1 = k*dot(abs(i1-c)+abs(i3-c),dt)/(0.125*dot(i1+i3,dt)+lum_add);
		w2 = k*dot(abs(i2-c)+abs(i4-c),dt)/(0.125*dot(i2+i4,dt)+lum_add);
		w3 = k*dot(abs(s1-c)+abs(s3-c),dt)/(0.125*dot(s1+s3,dt)+lum_add);
		w4 = k*dot(abs(s2-c)+abs(s4-c),dt)/(0.125*dot(s2+s4,dt)+lum_add);

		w1 = clamp(w1+mx,min_w,max_w);
		w2 = clamp(w2+mx,min_w,max_w);
		w3 = clamp(w3+mx,min_w,max_w);
		w4 = clamp(w4+mx,min_w,max_w);
		
		color = vec4((w1*(i1+i3)+w2*(i2+i4)+w3*(s1+s3)+w4*(s2+s4)+c)/(2.0*(w1+w2+w3+w4)+1.0));
	}else if (type==1){
		
		const float mx = 0.325;      // start smoothing wt.
		const float k = -0.250;      // wt. decrease factor
		const float max_w = 0.25;    // max filter weigth
		const float min_w =-0.05;    // min filter weigth
		const float lum_add = 0.25;  // effects smoothing
		
		vec4 t1 = vec4(uv-dg1,uv-ddy);
		vec4 t2 = vec4(uv-dg2,uv+ddx);
		vec4 t3 = vec4(uv+dg1,uv+ddy);
		vec4 t4 = vec4(uv+dg2,uv-ddx);
		
		vec4 c00 = texture(SCREEN_TEXTURE, t1.xy); 
		vec4 c10 = texture(SCREEN_TEXTURE, t1.zw); 
		vec4 c20 = texture(SCREEN_TEXTURE, t2.xy); 
		vec4 c01 = texture(SCREEN_TEXTURE, t4.zw); 
		vec4 c21 = texture(SCREEN_TEXTURE, t2.zw); 
		vec4 c02 = texture(SCREEN_TEXTURE, t4.xy); 
		vec4 c12 = texture(SCREEN_TEXTURE, t3.zw); 
		vec4 c22 = texture(SCREEN_TEXTURE, t3.xy); 

		float md1 = dot(abs(c00 - c22), dt);
		float md2 = dot(abs(c02 - c20), dt);

		float w1 = dot(abs(c22 - c), dt) * md2;
		float w2 = dot(abs(c02 - c), dt) * md1;
		float w3 = dot(abs(c00 - c), dt) * md2;
		float w4 = dot(abs(c20 - c), dt) * md1;

		float t1_ = w1 + w3;
		float t2_ = w2 + w4;
		float ww = max(t1_, t2_) + 0.0001;

		c = (w1 * c00 + w2 * c20 + w3 * c22 + w4 * c02 + ww * c) / (t1_ + t2_ + ww);

		float lc1 = k / (0.12 * dot(c10 + c12 + c, dt) + lum_add);
		float lc2 = k / (0.12 * dot(c01 + c21 + c, dt) + lum_add);

		w1 = clamp(lc1 * dot(abs(c - c10), dt) + mx, min_w, max_w);
		w2 = clamp(lc2 * dot(abs(c - c21), dt) + mx, min_w, max_w);
		w3 = clamp(lc1 * dot(abs(c - c12), dt) + mx, min_w, max_w);
		w4 = clamp(lc2 * dot(abs(c - c01), dt) + mx, min_w, max_w);

		color = vec4(w1 * c10 + w2 * c21 + w3 * c12 + w4 * c01 + (1.0 - w1 - w2 - w3 - w4) * c);
	}
	COLOR = color;
}"

[sub_resource type="ShaderMaterial" id=14]
shader = SubResource( 13 )
shader_param/type = 2

[sub_resource type="Shader" id=9]
code = "shader_type canvas_item;

//#version 130

// OmniScale
// by Lior Halphon
// original GLSL code from hunterk by way of RetroArch
// ported to Godot3 shader language by Nobuyuki

//
// MIT License
//
// Copyright (c) 2015-2016 Lior Halphon
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the \"Software\"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
// 

uniform int ScaleMultiplier : hint_range(2, 12) = 4;

// vertex compatibility #defines
// #define vTexCoord TEX0.xy
// #define outsize vec4(OutputSize, 1.0 / OutputSize)




//uniform sampler2D Texture;


// We use the same colorspace as the HQx algorithms. (YUV?)
vec3 rgb_to_hq_colospace(vec4 rgb)
{
    return vec3( 0.250 * rgb.r + 0.250 * rgb.g + 0.250 * rgb.b,
                 0.250 * rgb.r - 0.000 * rgb.g - 0.250 * rgb.b,
                -0.125 * rgb.r + 0.250 * rgb.g - 0.125 * rgb.b);
}


bool is_different(vec4 a, vec4 b)
{
    vec3 diff = abs(rgb_to_hq_colospace(a) - rgb_to_hq_colospace(b));
    return diff.x > 0.125 || diff.y > 0.027 || diff.z > 0.031;
}

// This define could've made code a ton more readable if godot shaders supported it, but it doesn't.
// 55 occurances of this in code;  use regexp to turn it back once supported?
// #define P(m, r) ((pattern & (m)) == (r))


vec4 scale(sampler2D image, vec2 coord, vec2 pxSize) {

	vec2 OutputSize = vec2(float(ScaleMultiplier), float(ScaleMultiplier));
	vec2 textureDimensions = vec2(1.0,1.0);

    // o = offset, the width of a pixel
    vec2 o = pxSize;
    vec2 texCoord = coord;

    // We always calculate the top left quarter.  If we need a different quarter, we flip our co-ordinates */

    // p = the position within a pixel [0...1]
    vec2 p = fract(texCoord / pxSize);

    if (p.x > 0.5) {
        o.x = -o.x;
        p.x = 1.0 - p.x;
    }
    if (p.y > 0.5) {
        o.y = -o.y;
        p.y = 1.0 - p.y;
    }



    vec4 w0 = texture(image, texCoord + vec2( -o.x, -o.y));
    vec4 w1 = texture(image, texCoord + vec2(    0, -o.y));
    vec4 w2 = texture(image, texCoord + vec2(  o.x, -o.y));
    vec4 w3 = texture(image, texCoord + vec2( -o.x,    0));
    vec4 w4 = texture(image, texCoord + vec2(    0,    0));
    vec4 w5 = texture(image, texCoord + vec2(  o.x,    0));
    vec4 w6 = texture(image, texCoord + vec2( -o.x,  o.y));
    vec4 w7 = texture(image, texCoord + vec2(    0,  o.y));
    vec4 w8 = texture(image, texCoord + vec2(  o.x,  o.y));

    int pattern = 0;
    if (is_different(w0, w4)) pattern |= 1 << 0;
    if (is_different(w1, w4)) pattern |= 1 << 1;
    if (is_different(w2, w4)) pattern |= 1 << 2;
    if (is_different(w3, w4)) pattern |= 1 << 3;
    if (is_different(w5, w4)) pattern |= 1 << 4;
    if (is_different(w6, w4)) pattern |= 1 << 5;
    if (is_different(w7, w4)) pattern |= 1 << 6;
    if (is_different(w8, w4)) pattern |= 1 << 7;

    if ((((pattern & (191)) == (55)) || ((pattern & (219)) == (19))) && is_different(w1, w5))
        return mix(w4, w3, 0.5 - p.x);
    if ((((pattern & (219)) == (73)) || ((pattern & (239)) == (109))) && is_different(w7, w3))
        return mix(w4, w1, 0.5 - p.y);
    if ((((pattern & (11)) == (11)) || ((pattern & (254)) == (74)) || ((pattern & (254)) == (26))) && is_different(w3, w1))
        return w4;
    if ((((pattern & (111)) == (42)) || ((pattern & (91)) == (10)) || ((pattern & (191)) == (58)) || ((pattern & (223)) == (90)) ||
         ((pattern & (159)) == (138)) || ((pattern & (207)) == (138)) || ((pattern & (239)) == (78)) || ((pattern & (63)) == (14)) ||
         ((pattern & (251)) == (90)) || ((pattern & (187)) == (138)) || ((pattern & (127)) == (90)) || ((pattern & (175)) == (138)) ||
         ((pattern & (235)) == (138))) && is_different(w3, w1))
        return mix(w4, mix(w4, w0, 0.5 - p.x), 0.5 - p.y);
    if (((pattern & (11)) == (8)))
        return mix(mix(w0 * 0.375 + w1 * 0.25 + w4 * 0.375, w4 * 0.5 + w1 * 0.5, p.x * 2.0), w4, p.y * 2.0);
    if (((pattern & (11)) == (2)))
        return mix(mix(w0 * 0.375 + w3 * 0.25 + w4 * 0.375, w4 * 0.5 + w3 * 0.5, p.y * 2.0), w4, p.x * 2.0);
    if (((pattern & (47)) == (47))) {
        float dist = length(p - vec2(0.5));
        float pixel_size = length(1.0 / (OutputSize / textureDimensions));
        if (dist < 0.5 - pixel_size / 2.0) {
            return w4;
        }
        vec4 r;
        if (is_different(w0, w1) || is_different(w0, w3)) {
            r = mix(w1, w3, p.y - p.x + 0.5);
        }
        else {
            r = mix(mix(w1 * 0.375 + w0 * 0.25 + w3 * 0.375, w3, p.y * 2.0), w1, p.x * 2.0);
        }

        if (dist > 0.5 + pixel_size / 2.0) {
            return r;
        }
        return mix(w4, r, (dist - 0.5 + pixel_size / 2.0) / pixel_size);
    }
    if (((pattern & (191)) == (55)) || ((pattern & (219)) == (19))) {
        float dist = p.x - 2.0 * p.y;
        float pixel_size = length(1.0 / (OutputSize / textureDimensions)) * sqrt(5.0);
        if (dist > pixel_size / 2.0) {
            return w1;
        }
        vec4 r = mix(w3, w4, p.x + 0.5);
        if (dist < -pixel_size / 2.0) {
            return r;
        }
        return mix(r, w1, (dist + pixel_size / 2.0) / pixel_size);
    }
    if (((pattern & (219)) == (73)) || ((pattern & (239)) == (109))) {
        float dist = p.y - 2.0 * p.x;
        float pixel_size = length(1.0 / (OutputSize / textureDimensions)) * sqrt(5.0);
        if (p.y - 2.0 * p.x > pixel_size / 2.0) {
            return w3;
        }
        vec4 r = mix(w1, w4, p.x + 0.5);
        if (dist < -pixel_size / 2.0) {
            return r;
        }
        return mix(r, w3, (dist + pixel_size / 2.0) / pixel_size);
    }
    if (((pattern & (191)) == (143)) || ((pattern & (126)) == (14))) {
        float dist = p.x + 2.0 * p.y;
        float pixel_size = length(1.0 / (OutputSize / textureDimensions)) * sqrt(5.0);

        if (dist > 1.0 + pixel_size / 2.0) {
            return w4;
        }

        vec4 r;
        if (is_different(w0, w1) || is_different(w0, w3)) {
            r = mix(w1, w3, p.y - p.x + 0.5);
        }
        else {
            r = mix(mix(w1 * 0.375 + w0 * 0.25 + w3 * 0.375, w3, p.y * 2.0), w1, p.x * 2.0);
        }

        if (dist < 1.0 - pixel_size / 2.0) {
            return r;
        }

        return mix(r, w4, (dist + pixel_size / 2.0 - 1.0) / pixel_size);

    }

    if (((pattern & (126)) == (42)) || ((pattern & (239)) == (171))) {
        float dist = p.y + 2.0 * p.x;
        float pixel_size = length(1.0 / (OutputSize / textureDimensions)) * sqrt(5.0);

        if (p.y + 2.0 * p.x > 1.0 + pixel_size / 2.0) {
            return w4;
        }

        vec4 r;

        if (is_different(w0, w1) || is_different(w0, w3)) {
            r = mix(w1, w3, p.y - p.x + 0.5);
        }
        else {
            r = mix(mix(w1 * 0.375 + w0 * 0.25 + w3 * 0.375, w3, p.y * 2.0), w1, p.x * 2.0);
        }

        if (dist < 1.0 - pixel_size / 2.0) {
            return r;
        }

        return mix(r, w4, (dist + pixel_size / 2.0 - 1.0) / pixel_size);
    }

    if (((pattern & (27)) == (3)) || ((pattern & (79)) == (67)) || ((pattern & (139)) == (131)) || ((pattern & (107)) == (67)))
        return mix(w4, w3, 0.5 - p.x);

    if (((pattern & (75)) == (9)) || ((pattern & (139)) == (137)) || ((pattern & (31)) == (25)) || ((pattern & (59)) == (25)))
        return mix(w4, w1, 0.5 - p.y);

    if (((pattern & (251)) == (106)) || ((pattern & (111)) == (110)) || ((pattern & (63)) == (62)) || ((pattern & (251)) == (250)) ||
        ((pattern & (223)) == (222)) || ((pattern & (223)) == (30)))
        return mix(w4, w0, (1.0 - p.x - p.y) / 2.0);

    if (((pattern & (79)) == (75)) || ((pattern & (159)) == (27)) || ((pattern & (47)) == (11)) ||
        ((pattern & (190)) == (10)) || ((pattern & (238)) == (10)) || ((pattern & (126)) == (10)) || ((pattern & (235)) == (75)) ||
        ((pattern & (59)) == (27))) {
        float dist = p.x + p.y;
        float pixel_size = length(1.0 / (OutputSize / textureDimensions));

        if (dist > 0.5 + pixel_size / 2.0) {
            return w4;
        }

        vec4 r;
        if (is_different(w0, w1) || is_different(w0, w3)) {
            r = mix(w1, w3, p.y - p.x + 0.5);
        }
        else {
            r = mix(mix(w1 * 0.375 + w0 * 0.25 + w3 * 0.375, w3, p.y * 2.0), w1, p.x * 2.0);
        }

        if (dist < 0.5 - pixel_size / 2.0) {
            return r;
        }

        return mix(r, w4, (dist + pixel_size / 2.0 - 0.5) / pixel_size);
    }

    if (((pattern & (11)) == (1)))
        return mix(mix(w4, w3, 0.5 - p.x), mix(w1, (w1 + w3) / 2.0, 0.5 - p.x), 0.5 - p.y);

    if (((pattern & (11)) == (0)))
        return mix(mix(w4, w3, 0.5 - p.x), mix(w1, w0, 0.5 - p.x), 0.5 - p.y);

    float dist = p.x + p.y;
    float pixel_size = length(1.0 / (OutputSize / textureDimensions));

    if (dist > 0.5 + pixel_size / 2.0)
        return w4;

    /* We need more samples to \"solve\" this diagonal */
    vec4 x0 = texture(image, texCoord + vec2( -o.x * 2.0, -o.y * 2.0));
    vec4 x1 = texture(image, texCoord + vec2( -o.x      , -o.y * 2.0));
    vec4 x2 = texture(image, texCoord + vec2(  0.0      , -o.y * 2.0));
    vec4 x3 = texture(image, texCoord + vec2(  o.x      , -o.y * 2.0));
    vec4 x4 = texture(image, texCoord + vec2( -o.x * 2.0, -o.y      ));
    vec4 x5 = texture(image, texCoord + vec2( -o.x * 2.0,  0.0      ));
    vec4 x6 = texture(image, texCoord + vec2( -o.x * 2.0,  o.y      ));

    if (is_different(x0, w4)) pattern |= 1 << 8;
    if (is_different(x1, w4)) pattern |= 1 << 9;
    if (is_different(x2, w4)) pattern |= 1 << 10;
    if (is_different(x3, w4)) pattern |= 1 << 11;
    if (is_different(x4, w4)) pattern |= 1 << 12;
    if (is_different(x5, w4)) pattern |= 1 << 13;
    if (is_different(x6, w4)) pattern |= 1 << 14;

    int diagonal_bias = -7;
    while (pattern != 0) {
        diagonal_bias += pattern & 1;
        pattern >>= 1;
    }

    if (diagonal_bias <=  0) {
        vec4 r = mix(w1, w3, p.y - p.x + 0.5);
        if (dist < 0.5 - pixel_size / 2.0) {
            return r;
        }
        return mix(r, w4, (dist + pixel_size / 2.0 - 0.5) / pixel_size);
    }
    
    return w4;
}

void fragment()
{
	COLOR = scale(SCREEN_TEXTURE, SCREEN_UV, SCREEN_PIXEL_SIZE);
	// COLOR = scale(TEXTURE, UV, TEXTURE_PIXEL_SIZE);
} 
"

[sub_resource type="ShaderMaterial" id=10]
shader = SubResource( 9 )
shader_param/ScaleMultiplier = 2

[sub_resource type="Shader" id=7]
code = "shader_type canvas_item;

uniform vec4 lightest : hint_color; // 061820
uniform vec4 light : hint_color; //346856
uniform vec4 dark : hint_color; // 88c070
uniform vec4 darkest : hint_color; // e0f8d0

void fragment() {
	COLOR = texture(SCREEN_TEXTURE, SCREEN_UV);
	float rgb_avg = (COLOR.r + COLOR.g + COLOR.b) / 3.0;
	if (rgb_avg < .25) {
		COLOR = darkest;
	} else if (rgb_avg < .5) {
		COLOR = dark;
	} else if (rgb_avg < .75) {
		COLOR = light;
	} else {
		COLOR = lightest;
	}
}"

[sub_resource type="ShaderMaterial" id=8]
shader = SubResource( 7 )
shader_param/lightest = Color( 0.0235294, 0.0941176, 0.12549, 1 )
shader_param/light = Color( 0.203922, 0.407843, 0.337255, 1 )
shader_param/dark = Color( 0.533333, 0.752941, 0.439216, 1 )
shader_param/darkest = Color( 0.878431, 0.972549, 0.815686, 1 )

[sub_resource type="Shader" id=3]
code = "shader_type canvas_item;
render_mode unshaded;

// Texture must have 'Filter'-flag enabled!

// Automatic smoothing
// independent of geometry and perspective
vec4 texturePointSmooth(sampler2D smp, vec2 uv, vec2 pixel_size)
{
	vec2 ddx = dFdx(uv);
	vec2 ddy = dFdy(uv);
	vec2 lxy = sqrt(ddx * ddx + ddy * ddy);
	
	vec2 uv_pixels = uv / pixel_size;
	
	vec2 uv_pixels_floor = round(uv_pixels) - vec2(0.5f);
	vec2 uv_dxy_pixels = uv_pixels - uv_pixels_floor;
	
	uv_dxy_pixels = clamp((uv_dxy_pixels - vec2(0.5f)) * pixel_size / lxy + vec2(0.5f), 0.0f, 1.0f);
	
	uv = uv_pixels_floor * pixel_size;
	
	return textureGrad(smp, uv + uv_dxy_pixels * pixel_size, ddx, ddy);
}

void fragment()
{
	COLOR = texturePointSmooth(SCREEN_TEXTURE, SCREEN_UV, SCREEN_PIXEL_SIZE);
}"

[sub_resource type="ShaderMaterial" id=4]
shader = SubResource( 3 )

[sub_resource type="Shader" id=1]
code = "/*
Shader from Godot Shaders - the free shader library.
godotshaders.com/shader/VHS-and-CRT-monitor-effect

This shader is under CC0 license. Feel free to use, improve and 
change this shader according to your needs and consider sharing 
the modified result to godotshaders.com.
*/

shader_type canvas_item;

//*** IMPORTANT! ***/ 
// - If you are using this shader to affect the node it is applied to set 'overlay' to false (unchecked in the instepctor).
// - If you are using this shader as an overlay, and want the shader to affect the nodes below in the Scene hierarchy,
//   set 'overlay' to true (checked in the inspector).
// On Mac there is potentially a bug causing this to not work properly. If that is the case and you want to use the shader as an overlay
// change all \"overlay ? SCREEN_TEXTURE : TEXTURE\" to only \"SCREEN_TEXTURE\" on lines 129-140, and \"vec2 uv = overlay ? warp(SCREEN_UV) : warp(UV);\"
// to \"vec2 uv = warp(SCREEN_UV);\" on line 98.
uniform bool overlay = false;

uniform float scanlines_opacity : hint_range(0.0, 1.0) = 0.4;
uniform float scanlines_width : hint_range(0.0, 0.5) = 0.25;
uniform float grille_opacity : hint_range(0.0, 1.0) = 0.3;
uniform vec2 resolution = vec2(640.0, 480.0); // Set the number of rows and columns the texture will be divided in. Scanlines and grille will make a square based on these values

uniform bool pixelate = true; // Fill each square (\"pixel\") with a sampled color, creating a pixel look and a more accurate representation of how a CRT monitor would work.

uniform bool roll = true;
uniform float roll_speed = 8.0; // Positive values are down, negative are up
uniform float roll_size : hint_range(0.0, 100.0) = 15.0;
uniform float roll_variation : hint_range(0.1, 5.0) = 1.8; // This valie is not an exact science. You have to play around with the value to find a look you like. How this works is explained in the code below.
uniform float distort_intensity : hint_range(0.0, 0.2) = 0.05; // The distortion created by the rolling effect.

uniform float noise_opacity : hint_range(0.0, 1.0) = 0.4;
uniform float noise_speed = 5.0; // There is a movement in the noise pattern that can be hard to see first. This sets the speed of that movement.

uniform float static_noise_intensity : hint_range(0.0, 1.0) = 0.06;

uniform float aberration : hint_range(-1.0, 1.0) = 0.03; // Chromatic aberration, a distortion on each color channel.
uniform float brightness = 1.4; // When adding scanline gaps and grille the image can get very dark. Brightness tries to compensate for that.
uniform bool discolor = true; // Add a discolor effect simulating a VHS

uniform float warp_amount :hint_range(0.0, 5.0) = 1.0; // Warp the texture edges simulating the curved glass of a CRT monitor or old TV.
uniform bool clip_warp = false;

uniform float vignette_intensity = 0.4; // Size of the vignette, how far towards the middle it should go.
uniform float vignette_opacity : hint_range(0.0, 1.0) = 0.5;

// Used by the noise functin to generate a pseudo random value between 0.0 and 1.0
vec2 random(vec2 uv){
    uv = vec2( dot(uv, vec2(127.1,311.7) ),
               dot(uv, vec2(269.5,183.3) ) );
    return -1.0 + 2.0 * fract(sin(uv) * 43758.5453123);
}

// Generate a Perlin noise used by the distortion effects
float noise(vec2 uv) {
    vec2 uv_index = floor(uv);
    vec2 uv_fract = fract(uv);

    vec2 blur = smoothstep(0.0, 1.0, uv_fract);

    return mix( mix( dot( random(uv_index + vec2(0.0,0.0) ), uv_fract - vec2(0.0,0.0) ),
                     dot( random(uv_index + vec2(1.0,0.0) ), uv_fract - vec2(1.0,0.0) ), blur.x),
                mix( dot( random(uv_index + vec2(0.0,1.0) ), uv_fract - vec2(0.0,1.0) ),
                     dot( random(uv_index + vec2(1.0,1.0) ), uv_fract - vec2(1.0,1.0) ), blur.x), blur.y) * 0.5 + 0.5;
}

// Takes in the UV and warps the edges, creating the spherized effect
vec2 warp(vec2 uv){
	vec2 delta = uv - 0.5;
	float delta2 = dot(delta.xy, delta.xy);
	float delta4 = delta2 * delta2;
	float delta_offset = delta4 * warp_amount;
	
	return uv + delta * delta_offset;
}

// Adds a black border to hide stretched pixel created by the warp effect
float border (vec2 uv){
	float radius = min(warp_amount, 0.08);
	radius = max(min(min(abs(radius * 2.0), abs(1.0)), abs(1.0)), 1e-5);
	vec2 abs_uv = abs(uv * 2.0 - 1.0) - vec2(1.0, 1.0) + radius;
	float dist = length(max(vec2(0.0), abs_uv)) / radius;
	float square = smoothstep(0.96, 1.0, dist);
	return clamp(1.0 - square, 0.0, 1.0);
}

// Adds a vignette shadow to the edges of the image
float vignette(vec2 uv){
	uv *= 1.0 - uv.xy;
	float vignette = uv.x * uv.y * 15.0;
	return pow(vignette, vignette_intensity * vignette_opacity);
}

void fragment()
{
	vec2 uv = overlay ? warp(SCREEN_UV) : warp(UV); // Warp the uv. uv will be used in most cases instead of UV to keep the warping
	vec2 text_uv = uv;
	vec2 roll_uv = vec2(0.0);
	float time = roll ? TIME : 0.0;
	

	// Pixelate the texture based on the given resolution.
	if (pixelate)
	{
		text_uv = ceil(uv * resolution) / resolution;
	}
	
	// Create the rolling effect. We need roll_line a bit later to make the noise effect.
	// That is why this runs if roll is true OR noise_opacity is over 0.
	float roll_line = 0.0;
	if (roll || noise_opacity > 0.0)
	{
		// Create the areas/lines where the texture will be distorted.
		roll_line = smoothstep(0.3, 0.9, sin(uv.y * roll_size - (time * roll_speed) ) );
		// Create more lines of a different size and apply to the first set of lines. This creates a bit of variation.
		roll_line *= roll_line * smoothstep(0.3, 0.9, sin(uv.y * roll_size * roll_variation - (time * roll_speed * roll_variation) ) );
		// Distort the UV where where the lines are
		roll_uv = vec2(( roll_line * distort_intensity * (1.-UV.x)), 0.0);
	}
	
	vec4 text;
	if (roll)
	{
		// If roll is true distort the texture with roll_uv. The texture is split up into RGB to 
		// make some chromatic aberration. We apply the aberration to the red and green channels accorging to the aberration parameter
		// and intensify it a bit in the roll distortion.
		text.r = texture(SCREEN_TEXTURE, text_uv + roll_uv * 0.8 + vec2(aberration, 0.0) * .1).r;
		text.g = texture(SCREEN_TEXTURE, text_uv + roll_uv * 1.2 - vec2(aberration, 0.0) * .1 ).g;
		text.b = texture(SCREEN_TEXTURE, text_uv + roll_uv).b;
		text.a = 1.0;
	}
	else
	{
		// If roll is false only apply the aberration without any distorion. The aberration values are very small so the .1 is only 
		// to make the slider in the Inspector less sensitive.
		text.r = texture(SCREEN_TEXTURE, text_uv + vec2(aberration, 0.0) * .1).r;
		text.g = texture(SCREEN_TEXTURE, text_uv - vec2(aberration, 0.0) * .1).g;
		text.b = texture(SCREEN_TEXTURE, text_uv).b;
		text.a = 1.0;
	}
	
	float r = text.r;
	float g = text.g;
	float b = text.b;
	
	uv = warp(UV);
	
	// CRT monitors don't have pixels but groups of red, green and blue dots or lines, called grille. We isolate the texture's color channels 
	// and divide it up in 3 offsetted lines to show the red, green and blue colors next to each other, with a small black gap between.
	if (grille_opacity > 0.0){
		
		float g_r = smoothstep(0.85, 0.95, abs(sin(uv.x * (resolution.x * 3.14159265))));
		r = mix(r, r * g_r, grille_opacity);
		
		float g_g = smoothstep(0.85, 0.95, abs(sin(1.05 + uv.x * (resolution.x * 3.14159265))));
		g = mix(g, g * g_g, grille_opacity);
		
		float b_b = smoothstep(0.85, 0.95, abs(sin(2.1 + uv.x * (resolution.x * 3.14159265))));
		b = mix(b, b * b_b, grille_opacity);
		
	}
	
	// Apply the grille to the texture's color channels and apply Brightness. Since the grille and the scanlines (below) make the image very dark you
	// can compensate by increasing the brightness.
	text.r = clamp(r * brightness, 0.0, 1.0);
	text.g = clamp(g * brightness, 0.0, 1.0);
	text.b = clamp(b * brightness, 0.0, 1.0);
	
	// Scanlines are the horizontal lines that make up the image on a CRT monitor. 
	// Here we are actual setting the black gap between each line, which I guess is not the right definition of the word, but you get the idea  
	float scanlines = 0.5;
	if (scanlines_opacity > 0.0)
	{
		// Same technique as above, create lines with sine and applying it to the texture. Smoothstep to allow setting the line size.
		scanlines = smoothstep(scanlines_width, scanlines_width + 0.5, abs(sin(uv.y * (resolution.y * 3.14159265))));
		text.rgb = mix(text.rgb, text.rgb * vec3(scanlines), scanlines_opacity);
	}
	
	// Apply the banded noise.
	if (noise_opacity > 0.0)
	{
		// Generate a noise pattern that is very stretched horizontally, and animate it with noise_speed
		float noise = smoothstep(0.4, 0.5, noise(uv * vec2(2.0, 200.0) + vec2(10.0, (TIME * (noise_speed))) ) );
		
		// We use roll_line (set above) to define how big the noise should be vertically (multiplying cuts off all black parts).
		// We also add in some basic noise with random() to break up the noise pattern above. The noise is sized according to 
		// the resolution value set in the inspector. If you don't like this look you can 
		// change \"ceil(uv * resolution) / resolution\" to only \"uv\" to make it less pixelated. Or multiply resolution with som value
		// greater than 1.0 to make them smaller.
		roll_line *= noise * scanlines * clamp(random((ceil(uv * resolution) / resolution) + vec2(TIME * 0.8, 0.0)).x + 0.8, 0.0, 1.0);
		// Add it to the texture based on noise_opacity
		text.rgb = clamp(mix(text.rgb, text.rgb + roll_line, noise_opacity), vec3(0.0), vec3(1.0));
	}
	
	// Apply static noise by generating it over the whole screen in the same way as above
	if (static_noise_intensity > 0.0)
	{
		text.rgb += clamp(random((ceil(uv * resolution) / resolution) + fract(TIME)).x, 0.0, 1.0) * static_noise_intensity;
	}
	
	// Apply a black border to hide imperfections caused by the warping.
	// Also apply the vignette
	text.rgb *= border(uv);
	text.rgb *= vignette(uv);
	// Hides the black border and make that area transparent. Good if you want to add the the texture on top an image of a TV or monitor.
	if (clip_warp)
	{
		text.a = border(uv);
	}
	
	// Apply discoloration to get a VHS look (lower saturation and higher contrast)
	// You can play with the values below or expose them in the Inspector.
	float saturation = 0.5;
	float contrast = 1.2;
	if (discolor)
	{
		// Saturation
		vec3 greyscale = vec3(text.r + text.g + text.b) / 3.;
		text.rgb = mix(text.rgb, greyscale, saturation);
		
		// Contrast
		float midpoint = pow(0.5, 2.2);
		text.rgb = (text.rgb - vec3(midpoint)) * contrast + midpoint;
	}
	
	COLOR = text;
}"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/overlay = true
shader_param/scanlines_opacity = 0.0
shader_param/scanlines_width = 0.25
shader_param/grille_opacity = 0.3
shader_param/resolution = Vector2( 640, 480 )
shader_param/pixelate = false
shader_param/roll = true
shader_param/roll_speed = 2.017
shader_param/roll_size = 3.542
shader_param/roll_variation = 5.0
shader_param/distort_intensity = 0.05
shader_param/noise_opacity = 0.4
shader_param/noise_speed = 5.0
shader_param/static_noise_intensity = 0.06
shader_param/aberration = 0.01
shader_param/brightness = 1.4
shader_param/discolor = false
shader_param/warp_amount = 0.02
shader_param/clip_warp = false
shader_param/vignette_intensity = 0.0
shader_param/vignette_opacity = 0.0

[node name="Node" type="Node"]

[node name="Node" type="Node" parent="."]

[node name="BattleBaseRoot" parent="Node" instance=ExtResource( 2 )]

[node name="Sprite" type="Sprite" parent="Node"]
visible = false
position = Vector2( 753.624, 218.584 )
texture = ExtResource( 1 )

[node name="Node2" type="CanvasLayer" parent="."]
layer = 3

[node name="RedTintShader" type="ColorRect" parent="Node2"]
visible = false
material = SubResource( 12 )
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = -15.0432
margin_top = -11.6378
margin_right = 21.9568
margin_bottom = 7.36224
__meta__ = {
"_edit_use_anchors_": false
}

[node name="hq4xBusted" type="ColorRect" parent="Node2"]
visible = false
material = SubResource( 14 )
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = -15.0432
margin_top = -11.6378
margin_right = 21.9568
margin_bottom = 7.36224
__meta__ = {
"_edit_use_anchors_": false
}

[node name="omniscaleBusted" type="ColorRect" parent="Node2"]
visible = false
material = SubResource( 10 )
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = -16.2521
margin_top = -13.6874
margin_right = -56.2521
margin_bottom = 60.3126
size_flags_horizontal = 3
size_flags_vertical = 3

[node name="GameboyShader" type="ColorRect" parent="Node2"]
visible = false
material = SubResource( 8 )
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = -0.404442
margin_top = -0.57106
margin_right = -0.404449
margin_bottom = 1.42896

[node name="xBRZBusted" type="ColorRect" parent="Node2"]
visible = false
material = SubResource( 4 )
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = -13.0679
margin_top = -0.129791
margin_right = 23.9321
margin_bottom = 18.8702
color = Color( 1, 1, 1, 0 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="CRTShader" type="ColorRect" parent="Node2"]
visible = false
material = SubResource( 2 )
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = -14.2415
margin_top = -8.78592
margin_right = 22.7585
margin_bottom = 10.2141
__meta__ = {
"_edit_use_anchors_": false
}
